<footer>
  <footer-inner>

    <figure style="margin-bottom: var(--sl-spacing-xxx-large); opacity: 0.1">
      <img alt="Whitefusion" src="/images/whitefusion-w-transparent.png" width="120" loading="lazy" />
    </figure>

    <p><strong>All things are permissible.<br/>But not everything is beneficial.</strong></p>

    <p>The trick is to know the difference.</p>

    <p>Ping us at <a href="mailto:{{ metadata.email }}">{{ metadata.email }}</a> <br/>to start something foolish.</p>
  </footer-inner>
</footer>

<sl-dialog label="Chat It Up">
  <step-one>
    <p>Fill in your email address, add a Twitter-length project summary, and then we’ll quickly follow-up to schedule a free 30-minute consultation. <strong>Sound good?</strong></p>

    <sl-form>
      <p>
        <sl-input required type="email" name="email" label="Email Address"></sl-input>
      </p>

      <p>
        <sl-textarea name="message" required rows="2" label="Summary"></sl-textarea>
      </p>

      <p style="text-align:center">
        <sl-button type="success" pill>Booyeah!</sl-button>
      </p>
    </sl-form>

    <form name="contact" method="POST" data-netlify="true">
      <input type="hidden" name="email" />
      <input type="hidden" name="message" />
    </form>
  </step-one>
  <step-two hidden>
    <p>Awesome sauce! We’ll respond to your email shortly.</p>

    <p>In the meantime, you can <a href="https://twitter.com/_whitefusion" target="_blank">follow us on Twitter</a>, or bake a lasagna. (Not sure what that has to do with anything. I just like lasagna.)</p>
  </step-two>
</sl-dialog>

<script>
  const form = document.querySelector("sl-dialog sl-form")

  form.querySelector("sl-button[type=success]").addEventListener("click", () => {
    form.submit()
  })

  form.addEventListener("sl-submit", event => {
    const formData = event.detail.formData
    let output = ""

    //
    // Example 1: Post data to a server and wait for a JSON response
    //
/*    fetch('https://jsonplaceholder.typicode.com/posts', {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(result => {
      console.log('Success:', result);
    })
    .catch(error => {
      console.error('Error:', error);
    }); */

    //
    // Example 2: Output all form control names + values
    //
    for (const entry of formData.entries()) {
      output += `${entry[0]}: ${entry[1]}\n`
    }
    alert(output)

    document.querySelector('sl-dialog').querySelectorAll("step-one, step-two").forEach(el => el.hidden = !el.hidden)
  })
</script>

<svg xmlns="//www.w3.org/2000/svg" version="1.1" class="svg-filters" style="display:none;">
  <defs>
    <filter id="marker-shape">
      <feTurbulence type="fractalNoise" baseFrequency="0 0.15" numOctaves="1" result="warp" />
      <feDisplacementMap xChannelSelector="R" yChannelSelector="G" scale="30" in="SourceGraphic" in2="warp" />
    </filter>
  </defs>
</svg>